name: Release

on:
  push:
    branches: [ main ]
    paths:
      - 'kubeflow/__init__.py'
  workflow_dispatch: {}

permissions:
  contents: write
  id-token: write

jobs:
  prepare:
    name: Prepare release branch
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      branch: ${{ steps.vars.outputs.branch }}
      is-prerelease: ${{ steps.vars.outputs.is-prerelease }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check version and branch
        id: vars
        run: |
          VERSION=v$(sed -n 's/^__version__ = "\(.*\)"/\1/p' kubeflow/__init__.py)
          MAJOR_MINOR=$(echo "$VERSION" | sed 's/^v//' | cut -d. -f1,2)
          BRANCH=release-$MAJOR_MINOR

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

          if [[ "$VERSION" =~ -rc($|\.) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Ensure release branch exists and contains version bump
        run: |
          set -euo pipefail
          VERSION="${{ steps.vars.outputs.version }}"
          BRANCH="${{ steps.vars.outputs.branch }}"
          MAIN_SHA="${{ github.sha }}"

          if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
            echo "Using existing branch: $BRANCH"
            git fetch origin "$BRANCH":"$BRANCH"
            git checkout "$BRANCH"
            if git merge-base --is-ancestor "$MAIN_SHA" "$BRANCH"; then
              echo "Commit $MAIN_SHA already present in $BRANCH. Skipping cherry-pick."
            else
              if ! git cherry-pick -x "$MAIN_SHA"; then
                echo "Cherry-pick failed. Please resolve manually on $BRANCH." >&2
                exit 1
              fi
            fi
          else
            echo "Creating new branch: $BRANCH from main@$MAIN_SHA"
            git checkout -B "$BRANCH" "$MAIN_SHA"
          fi
          git push origin "$BRANCH"

  build:
    name: Build package
    needs: [prepare]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout release branch
        run: |
          BRANCH="${{ needs.prepare.outputs.branch }}"
          git fetch origin "$BRANCH":"$BRANCH" || true
          git checkout "$BRANCH"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup build environment
        run: |
          make verify

      - name: Run unit tests
        run: |
          make test-python

      - name: Verify version
        run: |
          TAG_VERSION="${{ needs.prepare.outputs.version }}"
          CODE_VERSION="v$(python -c "import kubeflow; print(kubeflow.__version__)")"
          echo "Tag version: $TAG_VERSION"
          echo "Code version: $CODE_VERSION"
          if [[ "$TAG_VERSION" != "$CODE_VERSION" ]]; then
            echo "Version mismatch"; exit 1; fi
          echo "Version verified: $TAG_VERSION"

      - name: Build package
        run: |
          uv build

      - name: Validate package
        run: |
          uvx twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ needs.prepare.outputs.version }}
          path: dist/

  create-tag:
    name: Create and push tag
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          BRANCH="${{ needs.prepare.outputs.branch }}"
          if git ls-remote --tags origin "$VERSION" | grep -q "refs/tags/$VERSION"; then
            echo "Tag $VERSION already exists. Skipping"; exit 0; fi
          git fetch origin "$BRANCH":"$BRANCH"
          git checkout "$BRANCH"
          git tag "$VERSION"
          git push origin "$VERSION"

  publish-pypi:
    name: Publish to PyPI
    needs: [prepare, build, create-tag]
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://pypi.org/project/kubeflow/
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ needs.prepare.outputs.version }}
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  github-release:
    name: Create GitHub Release
    needs: [prepare, build, create-tag, publish-pypi]
    runs-on: ubuntu-latest
    environment:
      name: release
      url: https://github.com/kubeflow/sdk/releases
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract changelog
        id: changelog
        run: |
          VERSION="${{ needs.prepare.outputs.version }}"
          MAJOR_MINOR=$(echo "$VERSION" | sed 's/^v//' | cut -d. -f1,2)
          CHANGELOG_FILE="CHANGELOG/CHANGELOG-${MAJOR_MINOR}.md"
          if [[ -f "$CHANGELOG_FILE" ]]; then
            set -euo pipefail
            HEADER_REGEX="^# \\[${VERSION//./\\.}\\]"
            SECTION=$(sed -n "/$HEADER_REGEX/,\$p" "$CHANGELOG_FILE" | tail -n +2)
            NEXT_VERSION=$(echo "$SECTION" | grep -m1 "^# \\[v[0-9]" || true)
            if [[ -n "$NEXT_VERSION" ]]; then
              CHANGELOG=$(echo "$SECTION" | sed -n "1,/^# \\[v[0-9]/p" | sed '1d;$d')
            else
              CHANGELOG=$(echo "$SECTION" | sed '1d')
            fi
            if [[ -n "$CHANGELOG" ]]; then
              {
                echo "changelog<<EOF"
                echo "$CHANGELOG"
                echo "EOF"
              } >> $GITHUB_OUTPUT
            else
              echo "changelog=**Note:** No changelog section found for $VERSION in $CHANGELOG_FILE" >> $GITHUB_OUTPUT
            fi
          else
            echo "changelog=**Note:** $CHANGELOG_FILE not found" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: Kubeflow SDK ${{ needs.prepare.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is-prerelease == 'true' }}
          generate_release_notes: false
