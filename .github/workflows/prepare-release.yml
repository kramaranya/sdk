name: Prepare Release

on:
  push:
    branches: [ main ]
    paths:
      - 'kubeflow/__init__.py'
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  prepare:
    name: Create release branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Check version and branch
        id: vars
        shell: bash
        run: |
          VERSION=v$(sed -n 's/^__version__ = "\(.*\)"/\1/p' kubeflow/__init__.py)
          MAJOR_MINOR=$(echo "$VERSION" | sed 's/^v//' | cut -d. -f1,2)
          BRANCH=release-$MAJOR_MINOR

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT

      - name: Check if tag already exists
        id: tagcheck
        shell: bash
        run: |
          if git ls-remote --tags origin "${{ steps.vars.outputs.version }}" | grep -q "refs/tags/${{ steps.vars.outputs.version }}"; then
            echo "tag_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Ensure release branch exists and contains version bump
        if: steps.tagcheck.outputs.tag_exists == 'false'
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ steps.vars.outputs.version }}"
          BRANCH="${{ steps.vars.outputs.branch }}"

          MAIN_SHA="${{ github.sha }}"

          if git ls-remote --heads origin "$BRANCH" | grep -q "$BRANCH"; then
            echo "Using existing branch: $BRANCH"
            git fetch origin "$BRANCH":"$BRANCH"
            git checkout "$BRANCH"
            if git merge-base --is-ancestor "$MAIN_SHA" "$BRANCH"; then
              echo "Commit $MAIN_SHA already present in $BRANCH. Skipping cherry-pick."
            else
              if ! git cherry-pick -x "$MAIN_SHA"; then
                echo "Cherry-pick failed. Please resolve manually on $BRANCH." >&2
                exit 1
              fi
            fi
          else
            echo "Creating new branch: $BRANCH from main@${MAIN_SHA}"
            git checkout -B "$BRANCH" "$MAIN_SHA"
          fi

          git push origin "$BRANCH"
